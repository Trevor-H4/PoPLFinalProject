# Generated from GeniusGentlemenParsing.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,206,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,3,
        8,84,8,8,1,8,1,8,3,8,88,8,8,1,8,1,8,3,8,92,8,8,1,8,1,8,3,8,96,8,
        8,1,8,5,8,99,8,8,10,8,12,8,102,9,8,3,8,104,8,8,1,8,3,8,107,8,8,1,
        8,1,8,1,9,1,9,1,9,1,9,1,9,3,9,116,8,9,1,10,1,10,1,10,1,11,1,11,1,
        11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,
        14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
        17,1,17,1,17,1,17,1,18,1,18,1,19,4,19,156,8,19,11,19,12,19,157,1,
        20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,3,21,168,8,21,1,22,1,22,1,
        23,3,23,173,8,23,1,23,1,23,1,24,3,24,178,8,24,1,24,4,24,181,8,24,
        11,24,12,24,182,1,25,3,25,186,8,25,1,26,1,26,1,27,1,27,1,28,1,28,
        1,28,3,28,195,8,28,1,29,1,29,3,29,199,8,29,1,29,5,29,202,8,29,10,
        29,12,29,205,9,29,0,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,1,0,
        9,2,0,9,9,32,32,2,0,33,33,60,62,2,0,60,60,62,62,4,0,37,37,42,43,
        45,45,47,47,1,0,13,13,1,0,10,10,2,0,65,90,97,122,1,0,48,57,4,0,33,
        47,58,64,91,96,123,126,222,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,1,61,1,0,0,0,3,63,1,0,0,0,5,65,1,0,0,0,7,67,
        1,0,0,0,9,71,1,0,0,0,11,73,1,0,0,0,13,75,1,0,0,0,15,77,1,0,0,0,17,
        81,1,0,0,0,19,115,1,0,0,0,21,117,1,0,0,0,23,120,1,0,0,0,25,123,1,
        0,0,0,27,128,1,0,0,0,29,134,1,0,0,0,31,138,1,0,0,0,33,141,1,0,0,
        0,35,146,1,0,0,0,37,152,1,0,0,0,39,155,1,0,0,0,41,159,1,0,0,0,43,
        167,1,0,0,0,45,169,1,0,0,0,47,172,1,0,0,0,49,177,1,0,0,0,51,185,
        1,0,0,0,53,187,1,0,0,0,55,189,1,0,0,0,57,194,1,0,0,0,59,198,1,0,
        0,0,61,62,5,40,0,0,62,2,1,0,0,0,63,64,5,44,0,0,64,4,1,0,0,0,65,66,
        5,41,0,0,66,6,1,0,0,0,67,68,5,110,0,0,68,69,5,111,0,0,69,70,5,116,
        0,0,70,8,1,0,0,0,71,72,5,61,0,0,72,10,1,0,0,0,73,74,5,35,0,0,74,
        12,1,0,0,0,75,76,5,63,0,0,76,14,1,0,0,0,77,78,5,100,0,0,78,79,5,
        101,0,0,79,80,5,102,0,0,80,16,1,0,0,0,81,83,3,59,29,0,82,84,3,39,
        19,0,83,82,1,0,0,0,83,84,1,0,0,0,84,85,1,0,0,0,85,87,5,40,0,0,86,
        88,3,39,19,0,87,86,1,0,0,0,87,88,1,0,0,0,88,103,1,0,0,0,89,100,3,
        59,29,0,90,92,3,39,19,0,91,90,1,0,0,0,91,92,1,0,0,0,92,93,1,0,0,
        0,93,95,5,44,0,0,94,96,3,39,19,0,95,94,1,0,0,0,95,96,1,0,0,0,96,
        97,1,0,0,0,97,99,3,59,29,0,98,91,1,0,0,0,99,102,1,0,0,0,100,98,1,
        0,0,0,100,101,1,0,0,0,101,104,1,0,0,0,102,100,1,0,0,0,103,89,1,0,
        0,0,103,104,1,0,0,0,104,106,1,0,0,0,105,107,3,39,19,0,106,105,1,
        0,0,0,106,107,1,0,0,0,107,108,1,0,0,0,108,109,5,41,0,0,109,18,1,
        0,0,0,110,111,5,97,0,0,111,112,5,110,0,0,112,116,5,100,0,0,113,114,
        5,111,0,0,114,116,5,114,0,0,115,110,1,0,0,0,115,113,1,0,0,0,116,
        20,1,0,0,0,117,118,5,105,0,0,118,119,5,102,0,0,119,22,1,0,0,0,120,
        121,5,101,0,0,121,122,5,108,0,0,122,24,1,0,0,0,123,124,5,101,0,0,
        124,125,5,108,0,0,125,126,5,115,0,0,126,127,5,101,0,0,127,26,1,0,
        0,0,128,129,5,119,0,0,129,130,5,104,0,0,130,131,5,105,0,0,131,132,
        5,108,0,0,132,133,5,101,0,0,133,28,1,0,0,0,134,135,5,102,0,0,135,
        136,5,111,0,0,136,137,5,114,0,0,137,30,1,0,0,0,138,139,5,105,0,0,
        139,140,5,110,0,0,140,32,1,0,0,0,141,142,5,84,0,0,142,143,5,114,
        0,0,143,144,5,117,0,0,144,145,5,101,0,0,145,34,1,0,0,0,146,147,5,
        70,0,0,147,148,5,97,0,0,148,149,5,108,0,0,149,150,5,115,0,0,150,
        151,5,101,0,0,151,36,1,0,0,0,152,153,5,58,0,0,153,38,1,0,0,0,154,
        156,7,0,0,0,155,154,1,0,0,0,156,157,1,0,0,0,157,155,1,0,0,0,157,
        158,1,0,0,0,158,40,1,0,0,0,159,160,5,112,0,0,160,161,5,97,0,0,161,
        162,5,115,0,0,162,163,5,115,0,0,163,42,1,0,0,0,164,165,7,1,0,0,165,
        168,5,61,0,0,166,168,7,2,0,0,167,164,1,0,0,0,167,166,1,0,0,0,168,
        44,1,0,0,0,169,170,7,3,0,0,170,46,1,0,0,0,171,173,7,4,0,0,172,171,
        1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,7,5,0,0,175,48,1,
        0,0,0,176,178,5,45,0,0,177,176,1,0,0,0,177,178,1,0,0,0,178,180,1,
        0,0,0,179,181,3,53,26,0,180,179,1,0,0,0,181,182,1,0,0,0,182,180,
        1,0,0,0,182,183,1,0,0,0,183,50,1,0,0,0,184,186,7,6,0,0,185,184,1,
        0,0,0,186,52,1,0,0,0,187,188,7,7,0,0,188,54,1,0,0,0,189,190,7,8,
        0,0,190,56,1,0,0,0,191,195,3,51,25,0,192,195,3,53,26,0,193,195,5,
        95,0,0,194,191,1,0,0,0,194,192,1,0,0,0,194,193,1,0,0,0,195,58,1,
        0,0,0,196,199,3,51,25,0,197,199,5,95,0,0,198,196,1,0,0,0,198,197,
        1,0,0,0,199,203,1,0,0,0,200,202,3,57,28,0,201,200,1,0,0,0,202,205,
        1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,60,1,0,0,0,205,203,1,
        0,0,0,18,0,83,87,91,95,100,103,106,115,157,167,172,177,182,185,194,
        198,203,0
    ]

class GeniusGentlemenParsingLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    DEF = 8
    FUNCCALL = 9
    ANDOR = 10
    IF = 11
    EL = 12
    ELSE = 13
    WHILE = 14
    FOR = 15
    IN = 16
    TRUE = 17
    FALSE = 18
    COLON = 19
    WHITESPACE = 20
    PASS = 21
    CONDIT = 22
    ARITHMETIC_OPERATOR = 23
    NEWLINE = 24
    INT = 25
    LETTERS = 26
    DIGITS = 27
    SYMBOLS = 28
    CHARS = 29
    VAR = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "','", "')'", "'not'", "'='", "'#'", "'?'", "'def'", 
            "'if'", "'el'", "'else'", "'while'", "'for'", "'in'", "'True'", 
            "'False'", "':'", "'pass'" ]

    symbolicNames = [ "<INVALID>",
            "DEF", "FUNCCALL", "ANDOR", "IF", "EL", "ELSE", "WHILE", "FOR", 
            "IN", "TRUE", "FALSE", "COLON", "WHITESPACE", "PASS", "CONDIT", 
            "ARITHMETIC_OPERATOR", "NEWLINE", "INT", "LETTERS", "DIGITS", 
            "SYMBOLS", "CHARS", "VAR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "DEF", "FUNCCALL", "ANDOR", "IF", "EL", "ELSE", "WHILE", 
                  "FOR", "IN", "TRUE", "FALSE", "COLON", "WHITESPACE", "PASS", 
                  "CONDIT", "ARITHMETIC_OPERATOR", "NEWLINE", "INT", "LETTERS", 
                  "DIGITS", "SYMBOLS", "CHARS", "VAR" ]

    grammarFileName = "GeniusGentlemenParsing.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


