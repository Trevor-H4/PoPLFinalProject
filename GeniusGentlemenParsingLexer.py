# Generated from GeniusGentlemenParsing.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,175,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,3,
        1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        3,8,85,8,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
        12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
        15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
        18,4,18,125,8,18,11,18,12,18,126,1,19,1,19,1,19,1,19,1,19,1,20,1,
        20,1,20,3,20,137,8,20,1,21,1,21,1,22,3,22,142,8,22,1,22,1,22,1,23,
        3,23,147,8,23,1,23,4,23,150,8,23,11,23,12,23,151,1,24,3,24,155,8,
        24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,3,27,164,8,27,1,28,1,28,3,
        28,168,8,28,1,28,5,28,171,8,28,10,28,12,28,174,9,28,0,0,29,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,1,0,9,2,0,9,9,32,32,2,0,33,33,60,62,2,0,
        60,60,62,62,4,0,37,37,42,43,45,45,47,47,1,0,13,13,1,0,10,10,2,0,
        65,90,97,122,1,0,48,57,4,0,33,47,58,64,91,96,123,126,184,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,61,1,0,0,0,
        5,63,1,0,0,0,7,67,1,0,0,0,9,69,1,0,0,0,11,71,1,0,0,0,13,73,1,0,0,
        0,15,75,1,0,0,0,17,84,1,0,0,0,19,86,1,0,0,0,21,89,1,0,0,0,23,92,
        1,0,0,0,25,97,1,0,0,0,27,103,1,0,0,0,29,107,1,0,0,0,31,110,1,0,0,
        0,33,115,1,0,0,0,35,121,1,0,0,0,37,124,1,0,0,0,39,128,1,0,0,0,41,
        136,1,0,0,0,43,138,1,0,0,0,45,141,1,0,0,0,47,146,1,0,0,0,49,154,
        1,0,0,0,51,156,1,0,0,0,53,158,1,0,0,0,55,163,1,0,0,0,57,167,1,0,
        0,0,59,60,5,40,0,0,60,2,1,0,0,0,61,62,5,41,0,0,62,4,1,0,0,0,63,64,
        5,110,0,0,64,65,5,111,0,0,65,66,5,116,0,0,66,6,1,0,0,0,67,68,5,61,
        0,0,68,8,1,0,0,0,69,70,5,35,0,0,70,10,1,0,0,0,71,72,5,63,0,0,72,
        12,1,0,0,0,73,74,5,44,0,0,74,14,1,0,0,0,75,76,5,100,0,0,76,77,5,
        101,0,0,77,78,5,102,0,0,78,16,1,0,0,0,79,80,5,97,0,0,80,81,5,110,
        0,0,81,85,5,100,0,0,82,83,5,111,0,0,83,85,5,114,0,0,84,79,1,0,0,
        0,84,82,1,0,0,0,85,18,1,0,0,0,86,87,5,105,0,0,87,88,5,102,0,0,88,
        20,1,0,0,0,89,90,5,101,0,0,90,91,5,108,0,0,91,22,1,0,0,0,92,93,5,
        101,0,0,93,94,5,108,0,0,94,95,5,115,0,0,95,96,5,101,0,0,96,24,1,
        0,0,0,97,98,5,119,0,0,98,99,5,104,0,0,99,100,5,105,0,0,100,101,5,
        108,0,0,101,102,5,101,0,0,102,26,1,0,0,0,103,104,5,102,0,0,104,105,
        5,111,0,0,105,106,5,114,0,0,106,28,1,0,0,0,107,108,5,105,0,0,108,
        109,5,110,0,0,109,30,1,0,0,0,110,111,5,84,0,0,111,112,5,114,0,0,
        112,113,5,117,0,0,113,114,5,101,0,0,114,32,1,0,0,0,115,116,5,70,
        0,0,116,117,5,97,0,0,117,118,5,108,0,0,118,119,5,115,0,0,119,120,
        5,101,0,0,120,34,1,0,0,0,121,122,5,58,0,0,122,36,1,0,0,0,123,125,
        7,0,0,0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,
        1,0,0,0,127,38,1,0,0,0,128,129,5,112,0,0,129,130,5,97,0,0,130,131,
        5,115,0,0,131,132,5,115,0,0,132,40,1,0,0,0,133,134,7,1,0,0,134,137,
        5,61,0,0,135,137,7,2,0,0,136,133,1,0,0,0,136,135,1,0,0,0,137,42,
        1,0,0,0,138,139,7,3,0,0,139,44,1,0,0,0,140,142,7,4,0,0,141,140,1,
        0,0,0,141,142,1,0,0,0,142,143,1,0,0,0,143,144,7,5,0,0,144,46,1,0,
        0,0,145,147,5,45,0,0,146,145,1,0,0,0,146,147,1,0,0,0,147,149,1,0,
        0,0,148,150,3,51,25,0,149,148,1,0,0,0,150,151,1,0,0,0,151,149,1,
        0,0,0,151,152,1,0,0,0,152,48,1,0,0,0,153,155,7,6,0,0,154,153,1,0,
        0,0,155,50,1,0,0,0,156,157,7,7,0,0,157,52,1,0,0,0,158,159,7,8,0,
        0,159,54,1,0,0,0,160,164,3,49,24,0,161,164,3,51,25,0,162,164,5,95,
        0,0,163,160,1,0,0,0,163,161,1,0,0,0,163,162,1,0,0,0,164,56,1,0,0,
        0,165,168,3,49,24,0,166,168,5,95,0,0,167,165,1,0,0,0,167,166,1,0,
        0,0,168,172,1,0,0,0,169,171,3,55,27,0,170,169,1,0,0,0,171,174,1,
        0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,58,1,0,0,0,174,172,1,0,
        0,0,11,0,84,126,136,141,146,151,154,163,167,172,0
    ]

class GeniusGentlemenParsingLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    DEF = 8
    ANDOR = 9
    IF = 10
    EL = 11
    ELSE = 12
    WHILE = 13
    FOR = 14
    IN = 15
    TRUE = 16
    FALSE = 17
    COLON = 18
    WHITESPACE = 19
    PASS = 20
    CONDIT = 21
    ARITHMETIC_OPERATOR = 22
    NEWLINE = 23
    INT = 24
    LETTERS = 25
    DIGITS = 26
    SYMBOLS = 27
    CHARS = 28
    VAR = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'not'", "'='", "'#'", "'?'", "','", "'def'", 
            "'if'", "'el'", "'else'", "'while'", "'for'", "'in'", "'True'", 
            "'False'", "':'", "'pass'" ]

    symbolicNames = [ "<INVALID>",
            "DEF", "ANDOR", "IF", "EL", "ELSE", "WHILE", "FOR", "IN", "TRUE", 
            "FALSE", "COLON", "WHITESPACE", "PASS", "CONDIT", "ARITHMETIC_OPERATOR", 
            "NEWLINE", "INT", "LETTERS", "DIGITS", "SYMBOLS", "CHARS", "VAR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "DEF", "ANDOR", "IF", "EL", "ELSE", "WHILE", "FOR", "IN", 
                  "TRUE", "FALSE", "COLON", "WHITESPACE", "PASS", "CONDIT", 
                  "ARITHMETIC_OPERATOR", "NEWLINE", "INT", "LETTERS", "DIGITS", 
                  "SYMBOLS", "CHARS", "VAR" ]

    grammarFileName = "GeniusGentlemenParsing.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


